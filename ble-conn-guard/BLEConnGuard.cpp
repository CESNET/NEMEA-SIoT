#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include <csignal>
#include <getopt.h>
#include <iostream>
#include <libtrap/trap.h>
#include <string>
#include <unirec/unirec.h>
#include <unistd.h>

#include "Configuration.h"

#define DEFAULT_CONFIG "ble-conn-guard.ini"

UR_FIELDS (
	// Generic fields
	time    TIMESTAMP,
	macaddr INCIDENT_DEV_ADDR,  // Bluetooth address of the device
	uint32  ALERT_CODE,
	string  CAPTION,
	uint32  DURATION
	
  uint8   ATYPE, // Address type: 0 = public, 1 = random
)

trap_module_info_t *module_info = NULL;

#define MODULE_BASIC_INFO(BASIC) \
	BASIC("BLE Connection Guard", \
		"This module receives UniRec containing information about BLE connections" \
		"and sends alerts if the connection is not allowed according to setting.", \
    1, 1)

#define MODULE_PARAMS(PARAM) \
	PARAM('I', "ignore-in-eof", "Do not terminate on incomming termination message.", no_argument, "none") \
	PARAM('c', "config", "Use this configuration file. (Default is ./ble-conn-guard.ini)", required_argument, "string")

static bool BLEConnGuard_run = true;

TRAP_DEFAULT_SIGNAL_HANDLER(BLEConnGuard_run = false)

int main(int argc, char **argv)
{
  int retval = 0;
	signed char opt;
	bool ignore_eof = 0; // Ignore EOF input parameter flag
  char *confFile = NULL;
  Configuration* config = NULL;
	
  /* UniRec variables */
	ur_template_t *in_tmplt = NULL, *out_tmplt = NULL;
	void *out_rec = NULL;
	
  /* UniRec Initialization */
	INIT_MODULE_INFO_STRUCT(MODULE_BASIC_INFO, MODULE_PARAMS)

	TRAP_DEFAULT_INITIALIZATION(argc, argv, *module_info);

	TRAP_REGISTER_DEFAULT_SIGNAL_HANDLER();
	
  /*
	 * Parse program arguments defined by MODULE_PARAMS macro with getopt() function (getopt_long() if available)
	 * This macro is defined in config.h file generated by configure script
	 */
	while ((opt = TRAP_GETOPT(argc, argv, module_getopt_string, long_options)) != -1) {
		switch (opt) {
			case 'I':
				ignore_eof = 1;
				break;
      case 'c':
        confFile = optarg;
        break;
			default:
				std::cerr << "Error: Invalid parameter." << std::endl;
				retval = 1;
				goto unirec_cleanup;
		}
	}
  
  try {
    if (confFile == NULL)
      config = new Configuration(DEFAULT_CONFIG);
    else
      config = new Configuration(confFile);
  } catch (IOError& e) {
    std::cerr << e.what() << std::endl;
    goto unirec_cleanup;
  } catch (ParseError& e) {
    std::cerr << e.what() << std::endl;
    goto unirec_cleanup;
  }


  delete config;

unirec_cleanup:
	TRAP_DEFAULT_FINALIZATION();

	ur_free_template(in_tmplt);
	ur_free_template(out_tmplt);

	ur_free_record(out_rec);

	ur_finalize();

	FREE_MODULE_INFO_STRUCT(MODULE_BASIC_INFO, MODULE_PARAMS)

 
  return retval;
}
